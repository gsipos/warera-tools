/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as RegionsRouteImport } from './pages/regions'
import { Route as CountriesRouteRouteImport } from './pages/countries.route'
import { Route as IndexRouteImport } from './pages/index'
import { Route as ItemsIndexRouteImport } from './pages/items.index'
import { Route as DepositsIndexRouteImport } from './pages/deposits.index'
import { Route as CountriesIndexRouteImport } from './pages/countries.index'
import { Route as ItemDepositsItemCodeRouteImport } from './pages/itemDeposits.$itemCode'
import { Route as CountriesAlliancesRouteImport } from './pages/countries.alliances'

const RegionsRoute = RegionsRouteImport.update({
  id: '/regions',
  path: '/regions',
  getParentRoute: () => rootRouteImport,
} as any)
const CountriesRouteRoute = CountriesRouteRouteImport.update({
  id: '/countries',
  path: '/countries',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ItemsIndexRoute = ItemsIndexRouteImport.update({
  id: '/items/',
  path: '/items/',
  getParentRoute: () => rootRouteImport,
} as any)
const DepositsIndexRoute = DepositsIndexRouteImport.update({
  id: '/deposits/',
  path: '/deposits/',
  getParentRoute: () => rootRouteImport,
} as any)
const CountriesIndexRoute = CountriesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CountriesRouteRoute,
} as any)
const ItemDepositsItemCodeRoute = ItemDepositsItemCodeRouteImport.update({
  id: '/itemDeposits/$itemCode',
  path: '/itemDeposits/$itemCode',
  getParentRoute: () => rootRouteImport,
} as any)
const CountriesAlliancesRoute = CountriesAlliancesRouteImport.update({
  id: '/alliances',
  path: '/alliances',
  getParentRoute: () => CountriesRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/countries': typeof CountriesRouteRouteWithChildren
  '/regions': typeof RegionsRoute
  '/countries/alliances': typeof CountriesAlliancesRoute
  '/itemDeposits/$itemCode': typeof ItemDepositsItemCodeRoute
  '/countries/': typeof CountriesIndexRoute
  '/deposits': typeof DepositsIndexRoute
  '/items': typeof ItemsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/regions': typeof RegionsRoute
  '/countries/alliances': typeof CountriesAlliancesRoute
  '/itemDeposits/$itemCode': typeof ItemDepositsItemCodeRoute
  '/countries': typeof CountriesIndexRoute
  '/deposits': typeof DepositsIndexRoute
  '/items': typeof ItemsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/countries': typeof CountriesRouteRouteWithChildren
  '/regions': typeof RegionsRoute
  '/countries/alliances': typeof CountriesAlliancesRoute
  '/itemDeposits/$itemCode': typeof ItemDepositsItemCodeRoute
  '/countries/': typeof CountriesIndexRoute
  '/deposits/': typeof DepositsIndexRoute
  '/items/': typeof ItemsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/countries'
    | '/regions'
    | '/countries/alliances'
    | '/itemDeposits/$itemCode'
    | '/countries/'
    | '/deposits'
    | '/items'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/regions'
    | '/countries/alliances'
    | '/itemDeposits/$itemCode'
    | '/countries'
    | '/deposits'
    | '/items'
  id:
    | '__root__'
    | '/'
    | '/countries'
    | '/regions'
    | '/countries/alliances'
    | '/itemDeposits/$itemCode'
    | '/countries/'
    | '/deposits/'
    | '/items/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CountriesRouteRoute: typeof CountriesRouteRouteWithChildren
  RegionsRoute: typeof RegionsRoute
  ItemDepositsItemCodeRoute: typeof ItemDepositsItemCodeRoute
  DepositsIndexRoute: typeof DepositsIndexRoute
  ItemsIndexRoute: typeof ItemsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/regions': {
      id: '/regions'
      path: '/regions'
      fullPath: '/regions'
      preLoaderRoute: typeof RegionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/countries': {
      id: '/countries'
      path: '/countries'
      fullPath: '/countries'
      preLoaderRoute: typeof CountriesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/items/': {
      id: '/items/'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deposits/': {
      id: '/deposits/'
      path: '/deposits'
      fullPath: '/deposits'
      preLoaderRoute: typeof DepositsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/countries/': {
      id: '/countries/'
      path: '/'
      fullPath: '/countries/'
      preLoaderRoute: typeof CountriesIndexRouteImport
      parentRoute: typeof CountriesRouteRoute
    }
    '/itemDeposits/$itemCode': {
      id: '/itemDeposits/$itemCode'
      path: '/itemDeposits/$itemCode'
      fullPath: '/itemDeposits/$itemCode'
      preLoaderRoute: typeof ItemDepositsItemCodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/countries/alliances': {
      id: '/countries/alliances'
      path: '/alliances'
      fullPath: '/countries/alliances'
      preLoaderRoute: typeof CountriesAlliancesRouteImport
      parentRoute: typeof CountriesRouteRoute
    }
  }
}

interface CountriesRouteRouteChildren {
  CountriesAlliancesRoute: typeof CountriesAlliancesRoute
  CountriesIndexRoute: typeof CountriesIndexRoute
}

const CountriesRouteRouteChildren: CountriesRouteRouteChildren = {
  CountriesAlliancesRoute: CountriesAlliancesRoute,
  CountriesIndexRoute: CountriesIndexRoute,
}

const CountriesRouteRouteWithChildren = CountriesRouteRoute._addFileChildren(
  CountriesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CountriesRouteRoute: CountriesRouteRouteWithChildren,
  RegionsRoute: RegionsRoute,
  ItemDepositsItemCodeRoute: ItemDepositsItemCodeRoute,
  DepositsIndexRoute: DepositsIndexRoute,
  ItemsIndexRoute: ItemsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
